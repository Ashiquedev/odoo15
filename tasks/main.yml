---
- name: installing_tools_req_to_build
  ansible.builtin.package:
    name:  "{{ installing_tools_req_to_build }}"
    update_cache: yes
    state: present
  loop:
  - "{{ installing_tools_req_to_build }}"
- name: Ensure group "odoo15" exists
  ansible.builtin.group:
    name: "{{ group_name }}"
    state: present
- name: create a new system user and group with home directory /opt/odoo15 that will run the Odoo service
  ansible.builtin.user:
    name: "{{ user_name }}"
    create_home: yes
    group: "{{ group_name }}"
    home: "{{ user_home }}"
    state: present
    shell: "{{ user_shell }}"
    system: yes
    state: present
- name: Adding odoo15 to sudoers group
  ansible.builtin.template:
    src: "{{ sudoers_template_name }}"
    dest: "{{ sudoers_template_destination_path }}"
- name: Installing wkhtmltopdf
  ansible.builtin.apt:
    deb: "{{ wkhtmltopdf_deb_package_url }}"
    state: presen
- name: "Install postgresql packages"
  ansible.builtin.apt: 
    name: "postgresql"
    state: present
- name: "Install Python packages"
  pip: 
    name: psycopg2-binary  
    state: present 
- name: "Find out if PostgreSQL is initialized"
  ansible.builtin.stat:
    path: "/etc/postgresql/12/main/pg_hba.conf"
  register: postgres_data
- name: "Initialize PostgreSQL"
  shell: 
    cmd: "service postgresql@12-main initdb"
  when: not postgres_data.stat.exists 
- name: "Start and enable services"
  ansible.builtin.systemd: 
    name: postgresql@12-main
    state: started
    enabled: yes
- name: "Create odoo database"
  postgresql_db:
    state: present
    name: "{{ db_name }}"
  become: yes
  become_user: postgres
- name: "Create db user"
  postgresql_user:
    state: present
    name: "{{ db_user }}"
    role_attr_flags: CREATEDB,CREATEROLE,SUPERUSER
    password: "{{ db_password }}"
  become: yes
  become_user: postgres
- name: "Grant db user access to odoo db"
  postgresql_privs:
    type: database
    database: "{{ db_name }}"
    roles: "{{ db_user }}"
    grant_option: no
    privs: all
  become: yes
  become_user: postgres
- name: "Allow md5 connection for the db user"
  postgresql_pg_hba:
    dest: "/etc/postgresql/12/main/pg_hba.conf"
    contype: host
    databases: all
    method: md5
    users: "{{ db_user }}"
    create: true
  become: yes
  become_user: postgres
  notify: restart postgres
  
- name: Clone the Odoo 15 source code from GitHub
  become_user: "{{ user_name }}"
  become: yes
  ansible.builtin.git:
    clone: yes
    depth: 1
    dest: "{{ odoo_git_repo_destination_dir }}"
    recursive: yes
    repo: "{{ odoo_git_repo_url }}"
    version: "{{ odoo_version }}"
- name: Install virtualenv via pip
  pip:
    name: virtualenv
    executable: pip3
- name: Create a new Python virtual environment for Odoo
  become_user: "{{ user_name }}"
  become: yes
  ansible.builtin.pip:
    chdir: /opt/odoo15
    state: present  
    name: "{{item}}"
  with_items:
    - setuptools
    - wheel  
- name: requrements.txt
  become_user: "{{ user_name }}"
  become: yes
  ansible.builtin.pip:
    chdir: /opt/odoo15
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: python3
    requirements: "{{ requirementstxt_path }}"
    state: present
- name: Create a directory if it does not exist
  become_user: "{{ user_name }}"
  become: yes
  ansible.builtin.file:
    path: "{{ odoo_custom_addons_path }}"
    state: directory
    mode: '0755'
- name: Create a configuration file odoo.conf
  ansible.builtin.template:
    dest: "{{ odoo_configuration_template_destination_path }}"
    src: "{{ odoo_configuration_template_name }}"
  notify:
     - Restart odoo15
- name: Create a odoo service file 
  ansible.builtin.template:
    dest: "{{ odoo_service_template_destination_path }}"
    src: "{{ odoo_service_template_name }}"
  notify:
     - Restart odoo15
- name: enabling and notify the odoo service
  ansible.builtin.systemd:
    daemon_reload: yes
    enabled: yes
    state: restarted
    name: odoo1